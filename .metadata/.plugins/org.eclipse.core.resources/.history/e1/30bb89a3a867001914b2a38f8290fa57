package com.talentos.aluguel.controller;

import java.sql.Date;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.server.ResponseStatusException;
import com.talentos.aluguel.model.Reserva;
import com.talentos.aluguel.repository.ReservaRepository;

@RequestMapping("/reservas")
public class ReversaController {
	
	@Autowired
	private ReservaRepository reservas;
	
	@GetMapping
	public List<Reserva> listarAlugueis() {
		return reservas.findAll();
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Reserva> buscar(@PathVariable Long id) {
		Optional<Reserva> reserva= reservas.findById(id);
		if (reservas.equals(null)) { 
			// Em caso de ser nulo o sistema retorna um erro 404 ao invés de null
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok(reserva.get());
	}
	
	@GetMapping("/reservasRecentes")
	public Optional<Reserva> listarReservasDaSemana() {
		
		reservas
		return null;
	}
	
	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Reserva adicionar (@Valid @RequestBody Reserva reserva) {
		Optional<Reserva> reservaDuplicada = reservas.findByClienteAndLivro(reserva.getIdCliente(), reserva.getIdLivro());
		if(reservaDuplicada.isPresent()) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Reserva já cadastrada");
		}
		return reservas.save(reserva);
	}
	
	@PostMapping
	@ResponseStatus(HttpStatus.FOUND)
	public void remover (Long id) {
		Optional<Reserva> reserva = reservas.findById(id);
		if (!reserva.isPresent()) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Reserva não encontrada");
		}
		reservas.deleteById(id);
	}
	
	@PostMapping
	@ResponseStatus(HttpStatus.FOUND)
	public void editar (Long id, Date dataDeReserva, long idLivro, long idCliente, Date dataDeDevolucao) {
		Optional<Reserva> reserva = reservas.findById(id);
		if (!reserva.isPresent()) {
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Reserva não encontrada");
		}
		reserva.get().setDatadeReserva(dataDeReserva);
		reserva.get().setIdCliente(idCliente);
		reserva.get().setIdLivro(idLivro);
		reserva.get().setDataDevolucao(dataDeDevolucao);
		
		
	}

}
